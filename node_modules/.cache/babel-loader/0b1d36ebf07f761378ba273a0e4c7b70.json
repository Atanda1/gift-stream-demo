{"ast":null,"code":"import { reactive, computed, watch } from \"vue\";\nimport connectMetamask from \"./connectMetamask\"; //import { ethers } from \"ethers\";\n\nconst STATE_NAME = \"userState\";\nconst defaultState = {\n  address: \"\",\n  signer: null,\n  status: false\n};\n\nconst getDefaultState = () => {\n  if (localStorage.getItem(STATE_NAME) !== null) {\n    return JSON.parse(localStorage.getItem(STATE_NAME));\n  }\n\n  return defaultState;\n};\n\nconst state = reactive(getDefaultState());\nconst getters = {\n  getStatus: () => {\n    return computed(() => state.status);\n  }\n};\nconst actions = {// connectMetamask: async () => { \n  //     console.log(\"mnetamask\");\n  //     if (state.address == \"\") {\n  //       try {\n  //         const { ethereum } = window;\n  //         if (!ethereum) {\n  //           alert(\"Get MetaMask!\");\n  //           return;\n  //         }\n  //         const accounts = await ethereum.request({\n  //           method: \"eth_requestAccounts\",\n  //         });\n  //         console.log(\"Connected\", accounts[0]);\n  //         const provider = new ethers.providers.Web3Provider(ethereum);\n  //         const signer = await provider.getSigner();\n  //         console.log(\"signer\", signer);\n  //         state.status = true;\n  //         state.address = accounts[0];\n  //         console.log(\"state\", state.status);\n  //       } catch (error) {\n  //         console.log(error);\n  //       }\n  //     }\n  // }\n};\nwatch(() => state, () => {\n  localStorage.setItem(STATE_NAME, JSON.stringify(state));\n}, {\n  deep: true\n});\nexport default (() => {\n  if (localStorage.getItem(STATE_NAME) === null) {\n    localStorage.setItem(STATE_NAME, JSON.stringify(state));\n  }\n\n  return {\n    state,\n    ...getters,\n    ...actions\n  };\n});","map":{"version":3,"sources":["/Users/david/Documents/projects/gift-stream-demo/src/composables/index.js"],"names":["reactive","computed","watch","connectMetamask","STATE_NAME","defaultState","address","signer","status","getDefaultState","localStorage","getItem","JSON","parse","state","getters","getStatus","actions","setItem","stringify","deep"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,KAA7B,QAA0C,KAA1C;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;AAEA,MAAMC,UAAU,GAAG,WAAnB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAArB;;AAMA,MAAMC,eAAe,GAAG,MAAM;AAC5B,MAAIC,YAAY,CAACC,OAAb,CAAqBP,UAArB,MAAqC,IAAzC,EAA+C;AAC7C,WAAOQ,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqBP,UAArB,CAAX,CAAP;AACD;;AAED,SAAOC,YAAP;AACD,CAND;;AAQA,MAAMS,KAAK,GAAGd,QAAQ,CAACS,eAAe,EAAhB,CAAtB;AAEA,MAAMM,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,MAAM;AACf,WAAOf,QAAQ,CAAC,MAAMa,KAAK,CAACN,MAAb,CAAf;AACD;AAHa,CAAhB;AAMA,MAAMS,OAAO,GAAG,CACZ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBY,CAAhB;AA4BAf,KAAK,CACH,MAAMY,KADH,EAEH,MAAM;AACJJ,EAAAA,YAAY,CAACQ,OAAb,CAAqBd,UAArB,EAAiCQ,IAAI,CAACO,SAAL,CAAeL,KAAf,CAAjC;AACD,CAJE,EAKH;AAAEM,EAAAA,IAAI,EAAE;AAAR,CALG,CAAL;AAQA,gBAAe,MAAM;AACnB,MAAIV,YAAY,CAACC,OAAb,CAAqBP,UAArB,MAAqC,IAAzC,EAA+C;AAC7CM,IAAAA,YAAY,CAACQ,OAAb,CAAqBd,UAArB,EAAiCQ,IAAI,CAACO,SAAL,CAAeL,KAAf,CAAjC;AACD;;AAED,SAAO;AACLA,IAAAA,KADK;AAEL,OAAGC,OAFE;AAGL,OAAGE;AAHE,GAAP;AAKD,CAVD","sourcesContent":["import { reactive, computed, watch } from \"vue\";\nimport connectMetamask from \"./connectMetamask\";\n//import { ethers } from \"ethers\";\n\nconst STATE_NAME = \"userState\";\n\nconst defaultState = {\n  address: \"\",\n  signer: null,\n  status: false,\n};\n\nconst getDefaultState = () => {\n  if (localStorage.getItem(STATE_NAME) !== null) {\n    return JSON.parse(localStorage.getItem(STATE_NAME));\n  }\n\n  return defaultState;\n};\n\nconst state = reactive(getDefaultState());\n\nconst getters = {\n  getStatus: () => {\n    return computed(() => state.status);\n  },\n};\n\nconst actions = {\n    // connectMetamask: async () => { \n    //     console.log(\"mnetamask\");\n    //     if (state.address == \"\") {\n    //       try {\n    //         const { ethereum } = window;\n\n    //         if (!ethereum) {\n    //           alert(\"Get MetaMask!\");\n    //           return;\n    //         }\n    //         const accounts = await ethereum.request({\n    //           method: \"eth_requestAccounts\",\n    //         });\n    //         console.log(\"Connected\", accounts[0]);\n    //         const provider = new ethers.providers.Web3Provider(ethereum);\n    //         const signer = await provider.getSigner();\n    //         console.log(\"signer\", signer);\n    //         state.status = true;\n    //         state.address = accounts[0];\n    //         console.log(\"state\", state.status);\n    //       } catch (error) {\n    //         console.log(error);\n    //       }\n    //     }\n    // }\n};\n\nwatch(\n  () => state,\n  () => {\n    localStorage.setItem(STATE_NAME, JSON.stringify(state));\n  },\n  { deep: true }\n);\n\nexport default () => {\n  if (localStorage.getItem(STATE_NAME) === null) {\n    localStorage.setItem(STATE_NAME, JSON.stringify(state));\n  }\n\n  return {\n    state,\n    ...getters,\n    ...actions,\n  };\n};"]},"metadata":{},"sourceType":"module"}