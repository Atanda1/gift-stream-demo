{"ast":null,"code":"import { reactive, computed, watch } from \"vue\";\nimport connectMetamask from \"./connectMetamask\";\nimport { ethers } from \"ethers\";\nconst STATE_NAME = \"userState\";\nconst defaultState = {\n  address: \"\",\n  signer: null,\n  status: false\n};\n\nconst getDefaultState = () => {\n  if (localStorage.getItem(STATE_NAME) !== null) {\n    return JSON.parse(localStorage.getItem(STATE_NAME));\n  }\n\n  return defaultState;\n};\n\nconst state = reactive(getDefaultState());\nconst getters = {\n  getStatus: () => {\n    return computed(() => state.status);\n  }\n};\nconst actions = {\n  connectMetamask: async () => {\n    console.log(\"mnetamask\");\n\n    if (state.address == \"\") {\n      try {\n        const {\n          ethereum\n        } = window;\n\n        if (!ethereum) {\n          alert(\"Get MetaMask!\");\n          return;\n        }\n\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(\"Connected\", accounts[0]);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = await provider.getSigner();\n        console.log(\"signer\", signer);\n        state.status = true;\n        state.address = accounts[0];\n        console.log(\"state\", state.status);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n};\nwatch(() => state, () => {\n  localStorage.setItem(STATE_NAME, JSON.stringify(state));\n}, {\n  deep: true\n});\nexport default (() => {\n  if (localStorage.getItem(STATE_NAME) === null) {\n    localStorage.setItem(STATE_NAME, JSON.stringify(state));\n  }\n\n  return {\n    state,\n    ...getters,\n    ...actions\n  };\n});","map":{"version":3,"sources":["/Users/david/Documents/projects/gift-stream-demo/src/composables/index.js"],"names":["reactive","computed","watch","connectMetamask","ethers","STATE_NAME","defaultState","address","signer","status","getDefaultState","localStorage","getItem","JSON","parse","state","getters","getStatus","actions","console","log","ethereum","window","alert","accounts","request","method","provider","providers","Web3Provider","getSigner","error","setItem","stringify","deep"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,KAA7B,QAA0C,KAA1C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,MAAMC,UAAU,GAAG,WAAnB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAArB;;AAMA,MAAMC,eAAe,GAAG,MAAM;AAC5B,MAAIC,YAAY,CAACC,OAAb,CAAqBP,UAArB,MAAqC,IAAzC,EAA+C;AAC7C,WAAOQ,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqBP,UAArB,CAAX,CAAP;AACD;;AAED,SAAOC,YAAP;AACD,CAND;;AAQA,MAAMS,KAAK,GAAGf,QAAQ,CAACU,eAAe,EAAhB,CAAtB;AAEA,MAAMM,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,MAAM;AACf,WAAOhB,QAAQ,CAAC,MAAMc,KAAK,CAACN,MAAb,CAAf;AACD;AAHa,CAAhB;AAMA,MAAMS,OAAO,GAAG;AACZf,EAAAA,eAAe,EAAE,YAAY;AACzBgB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,QAAIL,KAAK,CAACR,OAAN,IAAiB,EAArB,EAAyB;AACvB,UAAI;AACF,cAAM;AAAEc,UAAAA;AAAF,YAAeC,MAArB;;AAEA,YAAI,CAACD,QAAL,EAAe;AACbE,UAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD;;AACD,cAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AACtCC,UAAAA,MAAM,EAAE;AAD8B,SAAjB,CAAvB;AAGAP,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,QAAQ,CAAC,CAAD,CAAjC;AACA,cAAMG,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,CAAkCR,QAAlC,CAAjB;AACA,cAAMb,MAAM,GAAG,MAAMmB,QAAQ,CAACG,SAAT,EAArB;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBZ,MAAtB;AACAO,QAAAA,KAAK,CAACN,MAAN,GAAe,IAAf;AACAM,QAAAA,KAAK,CAACR,OAAN,GAAgBiB,QAAQ,CAAC,CAAD,CAAxB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAAK,CAACN,MAA3B;AACD,OAjBD,CAiBE,OAAOsB,KAAP,EAAc;AACdZ,QAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF;AACJ;AAzBW,CAAhB;AA4BA7B,KAAK,CACH,MAAMa,KADH,EAEH,MAAM;AACJJ,EAAAA,YAAY,CAACqB,OAAb,CAAqB3B,UAArB,EAAiCQ,IAAI,CAACoB,SAAL,CAAelB,KAAf,CAAjC;AACD,CAJE,EAKH;AAAEmB,EAAAA,IAAI,EAAE;AAAR,CALG,CAAL;AAQA,gBAAe,MAAM;AACnB,MAAIvB,YAAY,CAACC,OAAb,CAAqBP,UAArB,MAAqC,IAAzC,EAA+C;AAC7CM,IAAAA,YAAY,CAACqB,OAAb,CAAqB3B,UAArB,EAAiCQ,IAAI,CAACoB,SAAL,CAAelB,KAAf,CAAjC;AACD;;AAED,SAAO;AACLA,IAAAA,KADK;AAEL,OAAGC,OAFE;AAGL,OAAGE;AAHE,GAAP;AAKD,CAVD","sourcesContent":["import { reactive, computed, watch } from \"vue\";\nimport connectMetamask from \"./connectMetamask\";\nimport { ethers } from \"ethers\";\n\nconst STATE_NAME = \"userState\";\n\nconst defaultState = {\n  address: \"\",\n  signer: null,\n  status: false,\n};\n\nconst getDefaultState = () => {\n  if (localStorage.getItem(STATE_NAME) !== null) {\n    return JSON.parse(localStorage.getItem(STATE_NAME));\n  }\n\n  return defaultState;\n};\n\nconst state = reactive(getDefaultState());\n\nconst getters = {\n  getStatus: () => {\n    return computed(() => state.status);\n  },\n};\n\nconst actions = {\n    connectMetamask: async () => { \n        console.log(\"mnetamask\");\n        if (state.address == \"\") {\n          try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n              alert(\"Get MetaMask!\");\n              return;\n            }\n            const accounts = await ethereum.request({\n              method: \"eth_requestAccounts\",\n            });\n            console.log(\"Connected\", accounts[0]);\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = await provider.getSigner();\n            console.log(\"signer\", signer);\n            state.status = true;\n            state.address = accounts[0];\n            console.log(\"state\", state.status);\n          } catch (error) {\n            console.log(error);\n          }\n        }\n    }\n};\n\nwatch(\n  () => state,\n  () => {\n    localStorage.setItem(STATE_NAME, JSON.stringify(state));\n  },\n  { deep: true }\n);\n\nexport default () => {\n  if (localStorage.getItem(STATE_NAME) === null) {\n    localStorage.setItem(STATE_NAME, JSON.stringify(state));\n  }\n\n  return {\n    state,\n    ...getters,\n    ...actions,\n  };\n};"]},"metadata":{},"sourceType":"module"}