{"ast":null,"code":"import { ethers } from \"ethers\";\nimport connect from \"./index\";\n\nconst connectMetamask = async () => {\n  console.log(\"mnetamask\");\n  const {\n    state\n  } = connect();\n\n  if (state.address == \"\") {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = await provider.getSigner();\n      console.log(\"signer\", signer); //   context.commit(\"setSigner\", signer);\n      //   context.commit(\"setAddress\", accounts[0]);\n\n      ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length < 1) {\n          const state = {\n            address: \"\",\n            signer: null,\n            status: false\n          };\n          console.log(\"disconnected\"); //   context.commit(\"setStatus\", false);\n          //   context.commit(\"reset\", state);\n\n          console.log(state);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\nexport default connectMetamask;","map":{"version":3,"sources":["/Users/david/Documents/projects/gift-stream-demo/src/composables/connectMetamask.js"],"names":["ethers","connect","connectMetamask","console","log","state","address","ethereum","window","alert","accounts","request","method","provider","providers","Web3Provider","signer","getSigner","on","length","status","error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,MAAMC,eAAe,GAAG,YAAY;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,OAAO,EAAzB;;AACA,MAAII,KAAK,CAACC,OAAN,IAAiB,EAArB,EAAyB;AACvB,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbE,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD;;AACD,YAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AACtCC,QAAAA,MAAM,EAAE;AAD8B,OAAjB,CAAvB;AAGAT,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBM,QAAQ,CAAC,CAAD,CAAjC;AACA,YAAMG,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCR,QAAlC,CAAjB;AACA,YAAMS,MAAM,GAAG,MAAMH,QAAQ,CAACI,SAAT,EAArB;AACEd,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBY,MAAtB,EAbA,CAeF;AACA;;AACAT,MAAAA,QAAQ,CAACW,EAAT,CAAY,iBAAZ,EAAgCR,QAAD,IAAc;AAC3C,YAAIA,QAAQ,CAACS,MAAT,GAAkB,CAAtB,EAAyB;AACvB,gBAAMd,KAAK,GAAG;AACZC,YAAAA,OAAO,EAAE,EADG;AAEZU,YAAAA,MAAM,EAAE,IAFI;AAGZI,YAAAA,MAAM,EAAE;AAHI,WAAd;AAKAjB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EANuB,CAOvB;AACA;;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,OAZD;AAaD,KA9BD,CA8BE,OAAOgB,KAAP,EAAc;AACdlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AACD;AACF;AACF,CAtCD;;AAwCA,eAAenB,eAAf","sourcesContent":["import { ethers } from \"ethers\";\nimport connect from \"./index\";\n\nconst connectMetamask = async () => {\n  console.log(\"mnetamask\");\n  const { state } = connect();\n  if (state.address == \"\") {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = await provider.getSigner();\n        console.log(\"signer\", signer);\n        \n      //   context.commit(\"setSigner\", signer);\n      //   context.commit(\"setAddress\", accounts[0]);\n      ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length < 1) {\n          const state = {\n            address: \"\",\n            signer: null,\n            status: false,\n          };\n          console.log(\"disconnected\");\n          //   context.commit(\"setStatus\", false);\n          //   context.commit(\"reset\", state);\n          console.log(state);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\n\nexport default connectMetamask;\n"]},"metadata":{},"sourceType":"module"}